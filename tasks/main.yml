---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"
  tags: users

- name: create groups
  group:
    name='{{ item.groupname }}'
    gid='{{ item.gid if item.gid }}'
    system="{{ 'yes' if item.is_system_group is defined else 'no' }}"
  with_items: users_groups_available
  when: users_groups_available is defined
  tags: users

- name: remove groups
  group:
    name: '{{ item }}'
    state: absent
  with_items: users_groups_deleted
  when: users_groups_deleted is defined
  tags: users

- name: create groups for users
  group:
    name='{{ item.username }}'
    gid='{{ item.uid }}'
    system="{{ 'yes' if item.is_system_user is defined else 'no' }}"
  with_items: users_available
  when: users_available is defined
  tags: users

- name: create users
  user:
    name='{{ item.username }}'
    uid='{{ item.uid if item.uid }}'
    comment='{{ item.name if item.name is defined else ""}}'
    group='{{ item.username }}'
    groups='{{ item.groups|join(",") if item.groups is defined else ""}}'
    home="{{ item.homedir if item.homedir is defined else users_default_homedir + "/" + item.username }}"
    move_home="{{ 'yes' if users_move_homedirs else 'no' }}"
    shell='{{ item.shell if item.shell is defined else users_default_shell }}'
    createhome='{{ 'yes' if users_create_homedirs else 'no' }}'
    password="{{ item.password if item.password is defined else '!' }}"
    update_password='{{ item.update_password if item.update_password is defined else users_default_update_password }}'
    system="{{ 'yes' if item.is_system_user is defined else 'no' }}"
  with_items: users_available
  when: users_available is defined
  tags: users

- name: remove users
  user:
    name: '{{ item }}'
    state: absent
    remove: yes
  with_items: users_deleted
  when: users_deleted is defined
  tags: [ "users", "removeusers" ]

- name: remove groups for users
  group:
    name: '{{ item }}'
    state: absent
  with_items: users_deleted
  when: users_deleted is defined
  tags: [ "users", "removeusers" ]

- name: force homedir permissions
  file:
    path={{ item.homedir if item.homedir is defined else users_default_homedir + "/" + item.username }}
    owner={{ item.homedir_owner if item.homedir_owner is defined else item.username }}
    group={{ item.homedir_group if item.homedir_group is defined else item.username }}
    mode={{ item.homedir_perm if item.homedir_perm is defined else users_default_homedir_perm }}
  with_items: users_available
  tags: users

- name: set authorized_keys for users (using name username)
  authorized_key:
    user: '{{ item.username }}'
    key: '{{ lookup("file", users_default_pubkey_location + item.username + ".pub") }}'
  with_items: users_available
  when: users_available is defined and users_create_homedirs and item.upload_key and not item.auth_file
  tags: users

- name: set authorized_keys for users (using auth_file)
  authorized_key:
    user: '{{ item.username }}'
    key: '{{ lookup("file", users_default_pubkey_location + item.auth_file) }}'
  with_items: users_available
  when: users_available is defined and users_create_homedirs and item.upload_key and item.auth_file
  tags: users